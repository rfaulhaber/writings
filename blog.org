#+HUGO_BASE_DIR: ~/Projects/personal-site

* About
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:END:
** Who?
:PROPERTIES:
:CUSTOM_ID: who
:END:

I'm a developer living in Cleveland, Ohio. My interests include web
development, programming languages, and, increasingly, systems
programming.

Much of my professional work is web development-related. I've been
writing JavaScript since 2014 and I know my way around many big
frameworks. Projects outside of work tend to be related to web
development or Rust.

** Projects
   :PROPERTIES:
   :CUSTOM_ID: projects
   :END:

All my projects can be found on my
[[https://github.com/rfaulhaber][GitHub]].

On top of that, I'm currently looking to contribute to open source
projects and interested in pursuing freelance work!

** Contact
   :PROPERTIES:
   :CUSTOM_ID: contact
   :END:

- [[mailto:faulhaberryan@gmail.com][Email 1]]
  [[mailto:ryan@sys9.net][Email 2]] ([[/gpg1.txt][GPG]])
- [[https://github.com/rfaulhaber][GitHub]]
- [[https://dev.to/rfaulhaber][dev.to]]
- [[https://www.linkedin.com/in/ryan-faulhaber-7438111a8/][LinkedIn]]
- [[https://twitter.com/ryan_faulhaber][Twitter]]
- Matrix: @sys9:matrix.org

Address, phone number, and resume can be provided upon request.

** About this site
   :PROPERTIES:
   :CUSTOM_ID: about-this-site
   :END:

This site was generated using [[https://gohugo.io][Hugo]].

This site's theme is
[[https://github.com/rfaulhaber/duotone-theme-hugo][duotone-theme-hugo]].
* Working With Me
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: working
:END:
I am an experienced software developer focusing mostly on full-stack web and
mobile development. *I am available to work on new projects part-time*.

Over the last few years of my professional life I've worked in full-stack web
and mobile development, and I have a limited amount of systems programming via
the Rust programming language. I'm experienced with all things JavaScript
in particular.

I am most engaged in my work when I am able to work on complex problems with
open-ended solutions. I enjoy working with like-minded engineers to solve
interesting problems. I'm obsessive over building adaptable systems and feel
very strongly about software modularity. To me, there's no problem too big or
complex.

If I sound like I could be a good fit, please [[mailto:ryan@sys9.net][email me]].

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: posts
:LOGGING:  logdone
:END:
** A Guide to Promises in JavaScript
CLOSED: [2020-06-02 Tue 14:00]
:PROPERTIES:
:EXPORT_FILE_NAME: js-promises
:EXPORT_AUTHOR: Ryan Faulhaber
:END:
Although the =async= and =await= keywords are now part of standard JavaScript,
under the hood they ultimately use Promises. Here we'll explore what Promises
are, why they're needed, and how you can "promisify" callbacks in JavaScript.

I find a lot of newcomers are often confused by terms like "callbacks",
"Promises", and what exactly =async= and =await= do. I hope to clear that up
with this article.

For the sake of clarity, this guide will use =function= syntax, and not
arrow functions. If you know how to use arrow functions, you can replace
much of this code with arrow functions and have it behave similarly.
Also, some of these code samples are more verbose than they need to be.
Methods like =Promise.resolve()= can cut down on boilerplate code.
*** First Class Functions in JavaScript
   :PROPERTIES:
   :CUSTOM_ID: first-class-functions-in-javascript
   :END:

In JavaScript, functions can be used like any other variable. This makes
them /first class/. For example:

#+BEGIN_SRC js -n
function callFunc(val, f) {
    return f(val);
}

// a simple function that adds 10 to any number
function add10(x) {
    return x + 10;
}

// here we're passing the `add10` function to another function
callFunc(3, add10); // => 13
#+END_SRC

#+RESULTS:
: undefined

Note that in the above example, =callFunc= is calling the function we
pass it and passing in a value itself. Here =f= could be replaced with
any function.

In JavaScript functions can be *anonymous*, simply meaning that they
aren't named[fn:1].

You can pass an anonymous function to another function directly if you
so choose. We can rewrite the call to =callFunc= using an anonymous
function in the following way:

#+BEGIN_SRC js -n
callFunc(3, function(x) {
    return x.toString();
}); // => '3'
#+END_SRC

#+RESULTS:

One interesting aspect of this feature is that it allows for a deferral
of execution of sorts. The function we pass to =callFunc= doesn't
actually get called until the function itself calls it.

*** (Re)-Introducing Callbacks
   :PROPERTIES:
   :CUSTOM_ID: re-introducing-callbacks
   :END:

A *callback* is an extension of this concept. Some definitions of
callbacks make them sound just like first class functions, but a more
specific definition would be: a function that is invoked at the end of
an asynchronous operation.



A classic example is with JavaScript's =setTimeout= function:

#+BEGIN_SRC js -n :exports both
setTimeout(function() {
    console.log('hello world!');
}, 2000);
#+END_SRC

#+RESULTS:
: undefined
: hello world!

In the above example, "hello world!" will get printed after two seconds.
You can think of =setTimeout= as performing an operation, in this case,
waiting for two seconds, and then calling the anonymous function after
that time has passed. We don't have any control over what =setTimeout=
is doing, but we know that it will wait for 2000 milliseconds, and are
able to provide it a function to be executed once it's done (of course
we expect =setTimeout= to do this). This is generally what callbacks
are.

Callbacks developed as a pattern in JavaScript because they were an easy
way to know when some asynchronous actions ended. Fetching data from a
server, for example, usually involved writing a callback to handle that
resulting data.

Although callbacks do get the job done, they do lead to very confusing
code, and this is perhaps the biggest problem with them. Consider the
following example. Suppose we have a function called =getDataFromServer=
that takes some data necessary for a database query and a callback, to
be executed upon the completion of that callout:

#+BEGIN_SRC js -n
// `getDataFromServer` takes a callback and data and passes `data` and
// `error` to whatever callback we provide
getDataFromServer(someInitialData, function(data, error) {
    if (data) {
        // here we do our second query
        getDataFromServer(data, function(nextData, error) {
            // here we get our next result
            if (nextData) {
                doSomethingElse();
            }
        });
    }
    // ...
});
#+END_SRC

#+RESULTS:

It's possible to rewrite the above code using named functions but it
doesn't make it much less confusing.

#+BEGIN_SRC js -n
getDataFromServer(initialData, firstRetrieval);

function firstRetrieval(data, error) {
    if (data) {
        getDataFromServer(nextRetrieval, data);
    }
    // ...
}

function nextRetrieval(data, error) {
    if (data) {
        doSomethingElse();
    }
    // ...
}
#+END_SRC

#+RESULTS:

This is referred to as "callback hell", because, aside from /looking/ like hell,
it creates a maintenance issue: we're left with a bunch of callbacks that may be
difficult to read and mentally parse through.

Neither of these examples consider variables that live outside the
context of these functions. Code like this used to be quite commonplace.
Maybe you need to update something on the DOM once you get the first
query. Very confusing!

*** Enter Promises
   :PROPERTIES:
   :CUSTOM_ID: enter-promises
   :END:

A =Promise= in some sense is a glorified callback. They allow you to
transform code that utilize callbacks into something that appears more
synchronous.

A =Promise= is just an object. In its most common usage it can be
constructed as such:

#+BEGIN_SRC js -n
const myPromise = new Promise(executor);
#+END_SRC

#+RESULTS:

=executor= is a function that takes two arguments provided by the
=Promise= object, =resolve= and =reject=, which are each functions
themselves. =executor= usually contains some asynchronous code and is
evaluated as soon as the =Promise= is constructed.

A trivial example of a =Promise= can be seen with =setTimeout=

#+BEGIN_SRC js -n
const myPromise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        const message = 'hello world';
        console.log('message in promise: ', message);
        resolve(message);
    }, 2000);
});
#+END_SRC

#+RESULTS:
: undefined
: message in promise:  hello world

This code is a little different than our original =setTimeout= code. In
addition to printing "hello world" to the console, we're passing that
string to the =resolve= function. If you run this code,
=message in promise: hello world= gets printed to the console after two
seconds.

At this point, it may not be clear why Promises are useful. So far we've
just added some more decorum around our callback code.

In order to make this code a little more useful, we'll invoke the
Promise's =.then()= method:

#+BEGIN_SRC js -n
const myPromise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve('hello world');
    }, 2000);
}).then(function(message) {
    console.log('message: ', message);
});
#+END_SRC

#+RESULTS:
: undefined
: message:  hello world

By calling =.then()= we can actually use the value passed to =resolve=.
=.then()= takes a function itself, and that function's arguments are
whatever get passed into the =resolve= function. In the above code we're
passing ='hello world'= and we can expect it to be passed to whatever
function we give =.then()=.

It's important to note that =.then()= actually returns another
=Promise=. This lets you chain =Promise= calls together. Whatever is
returned in the function passed to a =.then()= is passed to the next
=.then()=.

#+BEGIN_SRC js -n
const myPromise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve('hello world');
    }, 2000);
}).then(function(message) {
    console.log('message: ', message); // logs "message: hello world"
    return message.toUpperCase();
}).then(function(message) {
    console.log('message: ', message); // logs "message: HELLO WORLD"
});
#+END_SRC

#+RESULTS:
: undefined
: message:  hello world
: message:  HELLO WORLD

There is an additional method, =.catch()=, which is used for error
handling. This is where the =reject= function comes into play. The
=.catch()= callback will be called not only if the =reject= function is
called, but if /any/ of the =.then()= callbacks throw an error.

#+BEGIN_SRC js -n
const myPromise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        reject('hello world');
    }, 2000);
}).then(function(message) {
    console.log('message: ', message); // this will not get called
}).catch(function(err) {
    console.log('error:', err); // this will log "error: hello world"
});
#+END_SRC

#+RESULTS:
: undefined
: error: hello world

One last note on =.then()= methods, and this may be somewhat confusing:
it actually takes two parameters. The first is the callback for when the
=Promise= is fulfilled, and the second being for when the =Promise= is
rejected.

The above code could just as well be written:

#+BEGIN_SRC js -n
const myPromise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        reject('hello world');
    }, 2000);
}).then(function(message) {
    console.log('message: ', message); // this will not get called
}, function(err) {
    console.log('error:', err); // this will log "error: hello world"
});
#+END_SRC

#+RESULTS:
: undefined
: error: hello world

Note that we're passing two callbacks into the =.then()=. What
distinguishes this from using a =.catch()= is that this form corresponds
directly to a specific handler. This is useful if you need to handle the
failure of one callback specifically.

*** Promisifying
   :PROPERTIES:
   :CUSTOM_ID: promisifying
   :END:

Converting a function that uses callbacks into one that utilizes
=Promise= objects is done in the following steps:

1. Wrap the code that uses a callback in a new =Promise=
2. In the success condition of your callback, pass whatever result you
   get into the =resolve= function, if applicable
3. In the error condition of your callback, pass whatever failure you
   get into the =reject= function, if applicable

We can make our =getDataFromServer= function asynchronous by wrapping it
in a =Promise= as described:

#+BEGIN_SRC js -n
function getDataFromServerAsync(data) {
    return new Promise(function(resolve, reject) {
        getDataFromServer(data, function(result, error) {
            // we'll assume that if error !== null,
            // something went wrong
            if (error) {
                reject(error);
            } else {
                resolve(data);
            }
        });
    });
}
#+END_SRC

#+RESULTS:
: undefined

This allows us to chain the =Promise= returned.

#+BEGIN_SRC js -n
getDataFromServerAsync(data)
    .then(function(result) {
        return getDataFromServerAsync(result);
    }).then(function(result) {
        // do something with the result of the second query
    })
    .catch(function(error) {
        // do something with any rejected call
    });
#+END_SRC

#+RESULTS:

And this is the ultimate benefit of Promises: rather than getting lost
in callback after callback, we can simply chain a series of functions
together.

There is one noticeable problem with all that we've gone over, however.
Despite the more logical structuring that is delivered by a =Promise=,
having code that deals with values not directly inside the callback
scope is still an issue.

For example, I've seen newcomers to =Promise= write code similar to the
following:

#+BEGIN_SRC js -n
let resultVal;

new Promise(function(resolve) {
    setTimeout(function() {
        resolve('foo');
    }, 1);
}).then(function(val) {
    resultVal = val;
});

console.log('resultVal', resultVal); (ref:1)
#+END_SRC

#+RESULTS:
: resultVal undefined
: undefined

If you run this code, =resultVal= will print =undefined=. This is
because the =console.log= statement actually gets run before the code in
the =.then()= callback. This /may/ be desirable if you know =resultVal=
wouldn't be used after some time, but it leaves your program in (what I
would consider) an invalid state: your code is waiting on something to
be set that it has no direct control over.

There are ways around this, but there's no easy, simple, or sure-fire
way around it. Usually you just end up putting more code in the
=.then()= callbacks and mutate some kind of state.

The most straightforward way around this, however, is to use a new feature...

*** =async= / =await=
:PROPERTIES:
:CUSTOM_ID: enter-async-await
:END:

A few years ago the latest JavaScript standards added =async= and
=await= keywords. Now that we know how to use Promises, we can explore
these keywords further.

=async= is a keyword used to designate a function that returns a
=Promise=.

Consider a simple function:

#+BEGIN_SRC js -n
function foo() {
    // note that there exists a function called `Promise.resolve`
    // which, when used, is equivalent to the following code
    return new Promise(function(resolve) {
        resolve('hello world');
    });
}
#+END_SRC

#+RESULTS:
: undefined

All this function does is just return ='hello world'= in a Promise.[fn:2]

The equivalent code using =async= is:

#+BEGIN_SRC js -n
async function foo() {
    return 'hello world';
}
#+END_SRC

#+RESULTS:
: undefined

You can then think of =async= as syntactic sugar that rewrites your
function such that it returns a new =Promise=.

The =await= keyword is a little different though, and it's where the
magic happens. [[(1)][A few examples ago]] we saw how if we tried logging
=resultVal= it would be =undefined= because logging it would happen
before the value was set. =await= lets you get around that.

If we have a function that uses our =getDataFromServerAsync= function
above, we can use it in an =async= function as such:

#+BEGIN_SRC js -n
async function doSomething() {
    const data = await getDataFromServerAsync();
    console.log('data', data);
}
#+END_SRC

#+RESULTS:
: undefined

=data= will be set to whatever =getDataFromServerAsync= passes to the
=resolve= function.

On top of that, =await= will block, and the following =console.log=
won't be executed until =getDataFromServerAsync= is done.

But what if =getDataFromServerAsync= is rejected? It will throw an exception!
We can, of course, handle this in a =try/catch= block:

#+BEGIN_SRC js -n
async function doSomething() {
    try {
        const data = await rejectMe();
        console.log('data', data);
    } catch(e) {
        console.error('error thrown!', e); // => 'error thrown! rejected!' will print
    }
}

function rejectMe() {
    return new Promise(function(resolve, reject) {
        reject('rejected!');
    });
}

doSomething();

#+END_SRC

#+RESULTS:
: undefined

At this point you may find yourself thinking "Wow! This =async= stuff is great!
Why would I ever want to write Promises again?" As I said it's important to know
that =async= and =await= are just syntactic sugar for Promises, and the
=Promise= object has methods on it that can let you get more out of your =async=
code, such as [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all][=Promise.all=]], which allows you to wait for an array of Promises
to complete.

*** Conclusion
   :PROPERTIES:
   :CUSTOM_ID: conclusion
   :END:
Promises are an important part of the JavaScript ecosystem. If you use libraries
from NPM that do any kind of callouts to server, the odds are the API calls will
return =Promise= objects (if it was written recently).

Even though the new versions of JavaScript provide keywords that allow you to
get around writing Promises directly in simple cases, it's hopefully obvious by
now that knowing how they work under the hood is still important!

If you still feel confused about Promises after reading all this, I strongly
recommend trying to write code that uses Promises. Experiment and see what you
can do with them. Try using [[https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch][fetch]], for example, to get data from APIs. It's
something that may take some time to get down!

-----
I'm a software developer based in Cleveland, OH and I'm trying to start writing
more! Follow me on [[https://dev.to/rfaulhaber][dev.to]], [[https://github.com/rfaulhaber][GitHub]], and [[https://twitter.com/ryan_faulhaber][Twitter]]!

This article was written using [[https://orgmode.org][Org Mode]] for Emacs. If you
would like the Org mode version of this article, see my
[[https://github.com/rfaulhaber/writings][writings repo]], where the .org file
will be published!
*** Further reading
:PROPERTIES:
:CUSTOM_ID: further-reading
:END:
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise][Promises on MDN]]
- [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function][Async/Await on MDN]]
*** Footnotes
:PROPERTIES:
:CUSTOM_ID: footnotes
:END:
[fn:1] A brief explanation of named and anonymous functions:

#+BEGIN_SRC js -n :eval never
// named, function declaration
function foo() {}

// named function expression
// this is "named" because of "function bar()",
// not because we're assigning it to a variable named "foo"
// doing this is optional and may make reading stack
// traces or writing a recursive function easier
const foo = function bar() {};

// the right hand side of this assignment is an
// anonymous function expression
const foo = function() {};

// arrow function, nearly equivalent to form above.
// arrow functions are always anonymous
const foo = () => {};
#+END_SRC

[fn:2] This function's body can also be written as:
=return Promise.resolve('hello world');=
** You Should Try Emacs
CLOSED: [2020-07-13 Mon 16:00]
:PROPERTIES:
:EXPORT_FILE_NAME: try-emacs
:END:

No, really, you should try Emacs. I gave it a shot a few months ago and now I'm
hooked.

I know Emacs isn't the most trendy thing these days, in fact it seems that VS
Code is the new hotness. But Emacs deserves your attention.

Let me start by telling you how I arrived at Emacs: some time ago I used
IntelliJ for work, almost exclusively. IntelliJ is great, honestly. You can do
/a lot/ without having to leave the editor, which I came to realize was
something I wanted from an editor.

Some time later I switched to VS Code, and I switched for a lot of little
reasons: there were a lot of plugins, the editor looked nice, the editor was
more lightweight than IntelliJ, some languages I used were better supported. VS
Code is also great.

Then I learned Vim, and that's where I think the real journey to Emacs began. At
first I just learned Vim keybindings (press =i= to enter "insert mode", press
=viw= to highlight a word, etc.), and fortunately the Vim plugins for VS Code
and IntelliJ supported most of what I needed to do. But whenever I'd use Vim
proper in the terminal, I always realized it could do /a lot/ more, and the
thing I started to realize was that I wanted all those features. The Vim plugins
for VS Code and IntelliJ are, for all intents and purposes though, black boxes.
Sure you could open a PR and implement some feature yourself, but why bother
when Vim itself has those features? Or so was my reasoning.

So for some time I switched between three editors to get various tasks done, but
I still felt it wasn't enough. I felt all three missed /something/, but I
couldn't quite articulate what.

Then I learned about [[https://www.youtube.com/watch?v=dP1xVpMPn8M][Acme]], the editor from the [[https://9p.io/plan9/about.html][Plan 9 operating system]], and my
mind was blown. Acme wasn't without its own issues, sure, but the idea that the
editor itself should require almost no additional work from the user in order to
gain extra features was incredible to me. In Acme, you don't need a built-in
editor command to sort a bunch of lines. Instead, you can pipe your lines
through Unix's =sort= command and pipe the output back into the editor. Acme was
as extensible as your own system was.

Unfortunately, using Acme was somewhat unfeasible. I really needed syntax
highlighting and Vim keybindings (once you learn them they're very difficult to
forget, and you tend to want to use them everywhere!), and that was a
showstopper for me.

Enter Emacs. Someone I know who was a Vim user made the switch to Emacs and was
telling me how incredible it was, and at first I was skeptical. I thought Emacs
was some old dusty program from the 70s that was as arcane as something like
Prolog. Plus I had tried the tutorial years ago, and I thought the keybindings
were weird. I was assured, though, that Emacs had a plugin called [[https://github.com/emacs-evil/evil][Evil]] that
could emulate Vim keybindings, and maybe even better than VS Code or IntelliJ
(spoiler alert, it does). "Very well," I thought, "It wouldn't hurt to try." I
was not prepared for what Emacs had to offer.

Four months in and Emacs is now the /only/ editor I use. I will say though, in
the beginning, Emacs was extremely daunting. It was maybe the second hardest
editor to learn after Vim (Vim took me a good month before I was productive with
it). What is most daunting about Emacs though is why it's taken over my life:
it's infinitely extensible.

You may be skeptical. You might think "Well VS Code is extensible!" Indeed, it
is. But Emacs is extensible to a degree that's easy to underestimate. For all
intents and purposes, Emacs is a [[https://en.wikipedia.org/wiki/Lisp_machine][Lisp machine]]. Emacs, much like your browser,
provides an entire platform upon which functionality can be built. In your
browser's case, that functionality is written in JavaScript. In Emacs, it's Lisp
(specifically Emacs Lisp). Moving the cursor in any direction, for example, is a
binding between a key press and a Lisp function.

I'd argue that extensibility and customizability are crucial for productivity.
Everyone is different and as such I imagine we all use our computers a bit
differently. Emacs is extremely accommodating to whatever your workflow is,
provided you're willing to put in a bit of effort to customize Emacs.

In some ways, Emacs is the equal but opposite of Acme. Emacs provides /a lot/ of
tools. But unlike an editor like VS Code, editing Emacs is as easy as opening a
new buffer (a collection of text that may or may not correspond to a file),
writing some Emacs Lisp, evaluating it on the fly, and with just a few lines of
Lisp you have a new plugin.

I've emphasized Emacs's extensibility thus far, and I think that should be its
main selling point. Emacs is so extensible that there are pre-configurations of
Emacs to [[https://github.com/hlissner/doom-emacs][make it look something like VS Code]] (Doom Emacs is wonderful. It's what
I use and what got me into Emacs). It's so extensible that it can be used [[https://www.djcbsoftware.nl/code/mu/mu4e.html][as an
email client]] and [[https://github.com/hayamiz/twittering-mode][Twitter browser]]. And what's incredible about all these
extensions is that Emacs will carry all your configuration and keybindings
around to all these different contexts. If you're a Vim user, being able to do
things like check your email or use [[https://magit.vc/][Emacs's Git client]] with Vim keybindings is
wonderful.

(Side note: I never actually used a Git client before using Emacs. Magit is
maybe the only one I could ever see myself using.)

And lest I forget, Emacs also has something called [[https://orgmode.org/][Org mode]]. For a more
comprehensive introduction, I recommend [[https://youtu.be/SzA2YODtgK4][this video]]. Org mode on its surface can
be thought of a more feature-complete Markdown: it's a plaintext syntax that is
designed with the intention of rendering as something else, including but not
limited to HTML. However Org mode in its own right is very powerful because it's
backed up by Emacs. Org mode documents can be used as interactive todo lists and
agendas. Like Markdown, Org mode supports source code blocks. Unlike Markdown
(at least inherently), Emacs can actually evaluate Org source code blocks for
some supported languages. You can use this to write documentation to, for
example, illustrate what some block of code prints to the console. Or, since Org
mode can evaluate Emacs Lisp, you could [[https://github.com/hrs/dotfiles/blob/main/emacs/dot-emacs.d/configuration.org][write your entire Emacs confugration as
an Org document]].

So, if you're in the business of text editing, and you're used to having to
fine-tune configuration to get the exact outcome you want, I strongly suggest at
least giving Emacs a try. I feel like Emacs is an often forgotten about editor,
and I think it deserves a shot.

** TODO How I Learned to Stop Worrying and Love Emacs
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-love
:END:
** TODO Static Typing Isn't Your Enemy, But Bad Static Typing Is
:PROPERTIES:
:EXPORT_FILE_NAME: static-types
:END:
** TODO The Importance of Functional Programming in JavaScript
:PROPERTIES:
:EXPORT_FILE_NAME: important-fp
:END:
** TODO Against OO Orthodoxy, Towards Adaptability
:PROPERTIES:
:EXPORT_FILE_NAME: oo-orthodoxy
:END:
** TODO Running Rust code in... Emacs?
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-module-rust
:END:
** TODO If You've Never Used Linux, You Should Give It a Try
